?seq
increment_power <- function(x, pwr = 2) {
x <- x + 1
return(x^pwr)
}
increment_power(1:4, pwr = 2)
(2:5)^c(2, 2, 2, 2)
(2:5)^2
increment_power(2:5, pwr = c(2, 3))
noise <- function(animal) {
if (animal == "cow") {
return("moo")
}
else if (animal == "dog") {
return("woof")
}
else if (animal == "pig") {
return("oink")
}
else if (animal == "owl") {
return("hoot")
} else {
return("Animal not recognized!")
}
}
noise("pig")
noise("dog")
noise("hedgehog")
noise("cow")
parity <- function(x) {
if (x %% 2 == 0) {
return("even")
} else if (x %% 2 == 1) {
return("odd")
} else {
return("Not an integer!")
}
}
parity(4)
parity(17)
parity(12.43)
parity(1:3)
parity_vec <- function(x) {
result <- vector(length = length(x)) # initialize result
for (i in seq_along(x)) {
result[i] <- parity(x[i]) # call the previously defined function
}
result # last expression is automatically returned
}
parity_vec(c(12, 320, 598, 23))
1:10 %% 2
parity_vec <- function(x) {
result <- ifelse(x %% 2, "odd", "even")
not_int <- (x %% 1) != 0  # This is determines if x contains decimals (not int)
result[not_int] <- "Not an integer!"
result
}
parity_vec(c(12, 320.5, 599, 23.88))
parity_vec <- function(x) {
# result <- vector(length = length(x)) # initialize result
result <- NULL # initialize result
for (i in seq_along(x)) {
result[i] <- parity(x[i]) # call the previously defined function
}
result # last expression is automatically returned
}
parity_vec(c(12, 320, 598, 23))
?vector
small_count_simple(c(10, 15, -2, 5), 11)
small_count_simple <- function(v, target) {
sum(v < target)
}
small_count_simple(c(10, 15, -2, 5), 11)
small_count <- function(v) {
result <- vector(length = length(v))
# Your code here
for (i in seq_along(v)){
result[i] <- sum(v < v[i])
}
return(result)
}
small_count(c(12, 100, -3))
small_count(c(12, 100, -3, -12))
